{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialState","filterReducer","todos","todosReducer","filter","id","rootReducer","combineReducers","currentTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useDispatch","useSelector","TodoList","dispatch","visibleTodos","title","toLowerCase","includes","trim","completed","Error","length","className","map","isCurrent","cn","onClick","TodoFilter","onSubmit","event","preventDefault","value","onChange","target","filterActions","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","isLoading","setIsLoading","useEffect","currUser","a","userId","data","href","email","name","App","todoActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.36815b77.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    // Implement all actions here\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = { type: 'filter/SET_QUERY', payload: string };\ntype ClearQueryAction = { type: 'filter/CLEAR_QUERY' };\ntype SetStatusAction = { type: 'filter/SET_STATUS', payload: Status };\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst clearQuery = (): ClearQueryAction => ({ type: 'filter/CLEAR_QUERY' });\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nexport const actions = { setQuery, clearQuery, setStatus };\n\ntype Action = SetQueryAction | ClearQueryAction | SetStatusAction;\n\ntype State = {\n  query: string,\n  status: Status,\n};\n\nconst initialState: State = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (state: State = initialState, action: Action): State => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n    case 'filter/CLEAR_QUERY':\n      return {\n        ...state,\n        query: '',\n      };\n    case 'filter/SET_STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetAction = { type: 'todos/SET', payload: Todo[] };\ntype AddAction = { type: 'todos/ADD', payload: Todo };\ntype RemoveAction = { type: 'todos/REMOVE', payload: Todo };\n\nconst set = (todos: Todo[]) => ({ type: 'todos/SET', payload: todos });\nconst add = (todo: Todo) => ({ type: 'todos/ADD', payload: todo });\nconst remove = (todo: Todo) => ({ type: 'todos/REMOVE', payload: todo });\n\nexport const actions = { set, add, remove };\n\ntype Action = SetAction | AddAction | RemoveAction;\n\nconst todosReducer = (state: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return [...action.payload];\n    case 'todos/ADD':\n      return [...state, action.payload];\n    case 'todos/REMOVE':\n      return state.filter(todo => todo.id !== action.payload.id);\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport cn from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const { query, status } = useAppSelector(state => state.filter);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useDispatch();\n\n  let visibleTodos = [...todos];\n\n  if (query) {\n    visibleTodos = visibleTodos.filter(todo => todo.title.toLowerCase().includes(query.trim().toLowerCase()));\n  }\n\n  if (status !== 'all') {\n    visibleTodos = visibleTodos.filter(todo => {\n      switch (status) {\n        case 'active':\n          return !todo.completed;\n        case 'completed':\n          return todo.completed;\n        default:\n          throw new Error('Wrong filter');\n      }\n    });\n  }\n\n  return (\n    <>\n      {!visibleTodos.length\n        ? (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        ) : (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {visibleTodos.map(todo => {\n                const isCurrent = currentTodo?.id === todo.id;\n                const { id, completed, title } = todo;\n\n                return (\n                  <tr data-cy=\"todo\" key={id}>\n                    <td className=\"is-vcentered\">{id}</td>\n                    <td className=\"is-vcentered\">\n                      {completed && (\n                        <span className=\"icon\" data-cy=\"iconCompleted\">\n                          <i className=\"fas fa-check\" />\n                        </span>\n                      )}\n                    </td>\n\n                    <td className=\"is-vcentered is-expanded\">\n                      <p\n                        className={cn({\n                          'has-text-danger': !completed,\n                          'has-text-success': completed,\n                        })}\n                      >\n                        {title}\n                      </p>\n                    </td>\n\n                    <td className=\"has-text-right is-vcentered\">\n                      <button\n                        data-cy=\"selectButton\"\n                        className=\"button\"\n                        type=\"button\"\n                        onClick={() => dispatch(actions.setTodo(todo))}\n                      >\n                        <span className=\"icon\">\n                          <i\n                            className={cn('far', {\n                              'fa-eye': !isCurrent,\n                              'fa-eye-slash': isCurrent,\n                            })}\n                          />\n                        </span>\n                      </button>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        )}\n    </>\n  );\n};\n","import React, { ChangeEvent } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const { query, status } = useAppSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const handleSelect = (event: ChangeEvent<HTMLSelectElement>) => {\n    const value = event.target.value as Status;\n\n    dispatch(filterActions.setStatus(value));\n  };\n\n  const handleInput = (event: ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(event.target.value));\n  };\n\n  const handleClearQuery = () => {\n    dispatch(filterActions.clearQuery());\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleSelect}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleInput}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClearQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { FC, useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { actions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { useAppSelector } from '../../app/hooks';\nimport { getUser } from '../../api';\n\nexport const TodoModal: FC = () => {\n  const todo = useAppSelector(state => state.currentTodo);\n  const dispatch = useDispatch();\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const currUser = async () => {\n      if (todo) {\n        const data = await getUser(todo.userId);\n\n        setUser(data);\n        setIsLoading(false);\n      }\n    };\n\n    currUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${todo?.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => dispatch(actions.removeTodo())}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">{todo?.title}</p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {\n                  todo?.completed\n                    ? <strong className=\"has-text-success\">Done</strong>\n                    : <strong className=\"has-text-danger\">Planned</strong>\n                }\n                {' by '}\n                <a href={`mailto:${user?.email}`}>{user?.name}</a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport { FC, useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { useDispatch } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { actions as todoActions } from './features/todos';\nimport { useAppSelector } from './app/hooks';\n\nexport const App: FC = () => {\n  const dispatch = useDispatch();\n\n  const [isLoading, setIsLoading] = useState(true);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    const todos = async () => {\n      const data = await getTodos();\n\n      dispatch(todoActions.set(data));\n      setIsLoading(false);\n    };\n\n    todos();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n              {!isLoading && <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}